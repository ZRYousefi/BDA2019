}
log.prob <- max(V[,ncol(V)])
k <- which.max(V[, ncol(V)])
path <- rep(NA, length(s))
for(i in seq(length(s), 2)) {
path[i] <- k
k <- TB[k, i]
}
path[1] <- k
res <- list()
res$log.prob <- log.prob
res$path <- path
res$V <- V
res
}
E <- matrix(c(0.4, 0.1, 0.1, 0.4,
0.05, 0.4, 0.5, 0.05),
nrow = 4, ncol = 2)
rownames(E)=c("A","C","G","T")
T <- matrix(c(0.99, 0.01, 0.9, 0.1), 2, 2)
s <- c("A", "T", "C", "G", "C", "G", "C", "G", "C", "G", "A", "T", "A", "T")
viterbi(s, T, E)
viterbi_lecture <- function(s, T, E){
log.E <- log2(E)
log.T <- log2(T)
V <- matrix(rep(0, nrow(T)*length(s)), nrow=nrow(T))
TB <- matrix(rep(0, nrow(T)*length(s)), nrow=nrow(T))
V[,1] <- log2(1/nrow(V)) + t(log.E[s[1],])
for (i in 2:length(s)) {
for (l in 1:nrow(V)){
V[l, i] <- max(log.T[,l] + V[, i-1])
TB[l, i] <- which.max(log.T[,l] + V[,i-1])
V[l, i] <- V[l, i] + log.E[s[i], l]
}
}
log.prob <- max(V[,ncol(V)])
k <- which.max(V[,ncol(V)])
path <- rep(NA, length(s))
for (i in seq(length(s),2)) {
path[i] <- k
k <- TB[k, i]
}
path[1] <- k
res <- list()
res$log.prob <- log.prob
res$path <- path
res$V <- V
res$TB <- TB
return(res)
}
E <- matrix(c(0.4, 0.1, 0.1, 0.4,
0.05, 0.4, 0.5, 0.05),
nrow = 4, ncol = 2)
rownames(E)=c("A","C","G","T")
T <- matrix(c(0.99, 0.01, 0.9, 0.1), 2, 2)
s <- c("A", "T", "C", "G", "C", "G", "C", "G", "C", "G", "A", "T", "A", "T")
viterbi_lecture(s, T, E)
ss = c("A", "T", "C","G","C","G","C","G","C","G","A", "T","A", "T")
ss = c(1,4,2,3,2,3,2,3,2,3,1,4,1,4)
TT = matrix(c(0.99,0.1,0.01,0.9),ncol = 2)
EE = matrix(c(0.4, 0.1,0.1, 0.4,0.05,0.4,0.5,0.05),nrow = 4, ncol=2) # matrix(c(0.4,0.05, 0.1, 0.4, 0.1,0.5,0.4,0.05), byrow = T, nrow = 4)
rownames(EE)=c("A","C","G","T")
viterbi_lecture(ss,TT,EE)
E
EE
T
TT
2^-13.67
100/3
(33.33*65 + 33.33 * 95 ) / 100
(33.33*100 + 33.33 * 100 + 33.33*100 ) / 100
(33.33*100 + 33.33 * 100 + 33.33*100 ) / 20
(33.33*100 + 33.33 * 100 + 33.33*100 )*5 / 100
(33.33*100 + 33.33 * 100 + 33.33*100 ) / 100
(33.33*100 + 33.33 * 100 + 33.33*100 ) / 100 * 5
(33.33*100 + 33.33 * 100 + 33.33*100 ) / 500
(33.33*100 + 33.33 * 100 + 33.33*100 ) / 20
(33.33*100 + 33.33 * 100 + 33.33*100 ) * 5 / 100
(33.33*100 + 33.33 * 100 + 33.33*100 ) / 100
((33.33*100 + 33.33 * 100 + 33.33*100 ) / 100 )*5
((33.33*100 + 33.33 * 100 + 33.33*100 ) / 100 )*0.05
(33.33*100 + 33.33 * 100 + 33.33*100 )*0.05 / 100
(33.33*65 + 33.33 * 95 + 33.33*0 )*0.05 / 100
(33.33*65 + 33.33 * 95 + 33.33*70 )*0.05 / 100
(33.33*65 + 33.33 * 95 + 33.33*95 )*0.05 / 100
install.packages("loo")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("avehtari/BDA_course_Aalto",
subdir = "rpackage")
# install.packages("devtools")
# Sys.setenv(TAR = "/bin/tar")
# devtools::install_github("avehtari/BDA_course_Aalto",
#                          subdir = "rpackage")
library(aaltobda)
remotes::install_github("avehtari/BDA_course_Aalto",
subdir = "rpackage")
knitr::opts_chunk$set(cache=FALSE, message=FALSE, error=FALSE, warning=TRUE, comment=NA, out.width='95%')
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
install.packages("bayesplot")
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
install.packages("shinystan")
library(shinystan)
source('stan_utility.R')
SEED <- 48927 # set random seed for reproducability
d_bern <- list(N = 10, y = c(1, 1, 1, 0, 1, 1, 1, 0, 1, 0))
writeLines(readLines("bern.stan"))
fit_bern <- stan(file = 'bern.stan', data = d_bern, seed = SEED)
monitor(fit_bern, probs = c(0.1, 0.5, .9))
d_bin <- list(N = 10, y = 7)
writeLines(readLines("binom.stan"))
fit_bin <- stan(file = 'binom.stan', data = d_bin, seed = SEED)
monitor(fit_bin, probs = c(0.1, 0.5, 0.9))
draws <- as.data.frame(fit_bin)
mcmc_hist(draws, pars = 'theta')
multi_normal
data("bioassay")
x = bioassay$x
y = bioassay$y
n = bioassay$n
d_bin <- list(N = n, y = y)
writeLines(readLines("binom.stan"))
# install.packages("bayesplot")
# install.packages("shinystan")
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
source('stan_utility.R')
SEED <- 48927 # set random seed for reproducability
source('stan_utility.R')
getwd()
source('stan_utility.R')
source('stan_utility.R')
source('~/Dropbox (Aalto)/PhD/Courses/BDA/2019/E6/stan_utility.R', echo=TRUE)
source('stan_utility.R')
writeLines(readLines("binom.stan"))
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source('stan_utility.R')
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source('stan_utility.R')
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
SEED <- 48927 # set random seed for reproducability
data("bioassay")
function (package, help, pos = 2, lib.loc = NULL, character.only = FALSE,
logical.return = FALSE, warn.conflicts = TRUE, quietly = FALSE,
verbose = getOption("verbose"))
# install.packages("devtools")
# Sys.setenv(TAR = "/bin/tar")
# devtools::install_github("avehtari/BDA_course_Aalto",
#                          subdir = "rpackage")
library(aaltobda)
data("bioassay")
data("bioassay")
function (package, help, pos = 2, lib.loc = NULL, character.only = FALSE,
logical.return = FALSE, warn.conflicts = TRUE, quietly = FALSE,
verbose = getOption("verbose"))
library(aaltobda)
# install.packages("devtools")
# Sys.setenv(TAR = "/bin/tar")
# devtools::install_github("avehtari/BDA_course_Aalto",
#                          subdir = "rpackage")
library(aaltobda)
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
source('stan_utility.R')
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
knitr::opts_chunk$set(cache=FALSE, message=FALSE, error=FALSE, warning=TRUE, comment=NA, out.width='95%')
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
source('stan_utility.R')
getwd()
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
source('stan_utility.R')
setwd("/u/12/rezaeiz1/unix/Dropbox (Aalto)/PhD/Courses/BDA/2019/E6")
function (file, local = FALSE, echo = verbose, print.eval = echo,
exprs, spaced = use_file, verbose = getOption("verbose"),
prompt.echo = getOption("prompt"), max.deparse.length = 150,
width.cutoff = 60L, deparseCtrl = "showAttributes", chdir = FALSE,
encoding = getOption("encoding"), continue.echo = getOption("continue"),
skip.echo = 0, keep.source = getOption("keep.source"))
source('stan_utility.R')
source('stan_utility.R')
SEED <- 48927 # set random seed for reproducability
data("bioassay")
x = bioassay$x
y = bioassay$y
n = bioassay$n
d_bin <- list(N = n, y = y)
writeLines(readLines("binom.stan"))
# This chunk just sets echo = TRUE as default (i.e. print all code)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
source('stan_utility.R')
library(aaltobda)
n[0]
n[1]
x = bioassay$x
y = bioassay$y
n = bioassay$n
mu_alpha <- 0
s_alpha <- 2
mu_beta <- 10
s_beta <- 10
rho <- 0.5
s <-  matrix(c(s_alpha^2, rho*s_alpha*s_beta, rho*s_alpha*s_beta, s_beta^2 ), ncol=2)
mu = c(mu_alpha, mu_beta)
d_bin <- list(N = n, y = y, s, mu)
d_bin <- list(N = n, y = y, s = s, mu = mu)
data("bioassay")
x = bioassay$x
y = bioassay$y
n = bioassay$n
mu_alpha <- 0
s_alpha <- 2
mu_beta <- 10
s_beta <- 10
rho <- 0.5
s <-  matrix(c(s_alpha^2, rho*s_alpha*s_beta, rho*s_alpha*s_beta, s_beta^2 ), ncol=2)
mu = c(mu_alpha, mu_beta)
d_bin <- list(N = n, y = y, s = s, mu = mu)
data {
d_bin <- list(N = n, y = y, s = s, mu = mu)
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
rho <- 0.5
sigma <-  matrix(c(s_alpha^2, rho*s_alpha*s_beta, rho*s_alpha*s_beta, s_beta^2 ), ncol=2)
mu = c(mu_alpha, mu_beta)
d_bin <- list(N = n, y = y, sigma = sigma, mu = mu)
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
library(rstan)
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
source('stan_utility.R')
library(aaltobda)
SEED <- 48927 # set random seed for reproducability
data("bioassay")
x = bioassay$x
y = bioassay$y
n = bioassay$n
mu_alpha <- 0
s_alpha <- 2
mu_beta <- 10
s_beta <- 10
rho <- 0.5
sigma <-  matrix(c(s_alpha^2, rho*s_alpha*s_beta, rho*s_alpha*s_beta, s_beta^2 ), ncol=2)
mu = c(mu_alpha, mu_beta)
d_bin <- list(N = n, y = y, sigma = sigma, mu = mu)
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("bern.stan"))
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
# This chunk just sets echo = TRUE as default (i.e. print all code)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
library(loo)
library(ggplot2)
library(gridExtra)
library(bayesplot)
theme_set(bayesplot::theme_default(base_family = "sans"))
library(shinystan)
source('stan_utility.R')
library(aaltobda)
SEED <- 48927 # set random seed for reproducability
data("bioassay")
x = bioassay$x
y = bioassay$y
n = bioassay$n
mu_alpha <- 0
s_alpha <- 2
mu_beta <- 10
s_beta <- 10
rho <- 0.5
sigma <-  matrix(c(s_alpha^2, rho*s_alpha*s_beta, rho*s_alpha*s_beta, s_beta^2 ), ncol=2)
mu = c(mu_alpha, mu_beta)
d_bin <- list(N = n, y = y, sigma = sigma, mu = mu)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
knitr::opts_chunk$set(cache=FALSE, message=FALSE, error=FALSE, warning=TRUE, comment=NA, out.width='95%')
nn = 10
d_bern <- list(N = nn, y = c(1, 1, 1, 0, 1, 1, 1, 0, 1, 0))
writeLines(readLines("bern.stan"))
fit_bern <- stan(file = 'bern.stan', data = d_bern, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
mu_alpha <- 0
s_alpha <- 2
mu_beta <- 10
s_beta <- 10
rho <- 0.5
sigma <-  matrix(c(s_alpha^2, rho*s_alpha*s_beta, rho*s_alpha*s_beta, s_beta^2 ), ncol=2)
mu = c(mu_alpha, mu_beta)
d_bin <- list(N = n, y = y, sigma_0 = sigma, mu_0 = mu)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
function (con = stdin(), n = -1L, ok = TRUE, warn = TRUE, encoding = "unknown",
skipNul = FALSE)
writeLines(readLines("Assignment6.stan"))
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
length(n)
data("bioassay")
x = bioassay$x
y = bioassay$y
n = bioassay$n
k = length(n)
mu_alpha <- 0
s_alpha <- 2
mu_beta <- 10
s_beta <- 10
rho <- 0.5
sigma <-  matrix(c(s_alpha^2, rho*s_alpha*s_beta, rho*s_alpha*s_beta, s_beta^2 ), ncol=2)
mu = c(mu_alpha, mu_beta)
d_bin <- list(k = k,
N = n,
y = y,
sigma_0 = sigma,
mu_0 = mu)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
data("bioassay")
x = bioassay$x
y = bioassay$y
n = bioassay$n
k = length(n)
mu_alpha <- 0
s_alpha <- 2
mu_beta <- 10
s_beta <- 10
rho <- 0.5
sigma <-  matrix(c(s_alpha^2, rho*s_alpha*s_beta, rho*s_alpha*s_beta, s_beta^2 ), ncol=2)
mu = c(mu_alpha, mu_beta)
d_bin <- list(k = k,
N = n,
x = x,
y = y,
sigma_0 = sigma,
mu_0 = mu)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
?bioassaylp
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("binomb.stan"))
d_bin <- list(N = 100, y = 70)
fit_bin <- stan(file = 'binomb.stan', data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
d_bin <- list(N = n,
x = x,
y = y)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
function (sims, warmup = floor(dim(sims)[1]/2), probs = c(0.025,
0.25, 0.5, 0.75, 0.975), digits_summary = 1, print = TRUE,
...)
monitor(fit_bin, probs = c(0.1, 0.5, 0.9))
draws <- as.data.frame(fit_bin)
mcmc_hist(draws, pars = 'theta')
mcmc_hist(draws, pars = 'alpha')
mcmc_hist(draws, pars = 'beta')
mcmc_hist(draws, pars = 'beta')
mu_alpha <- 0
s_alpha <- 2
mu_beta <- 10
s_beta <- 10
rho <- 0.5
sigma <-  matrix(c(s_alpha^2, rho*s_alpha*s_beta, rho*s_alpha*s_beta, s_beta^2 ), ncol=2)
mu = c(mu_alpha, mu_beta)
d_bin <- list(N = n,
x = x,
y = y,
sigma_0 = sigma,
mu_0 = mu)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
draws <- as.data.frame(fit_bin)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
writeLines(readLines("Assignment6.stan"))
fit <- stan(file="Assignment6.stan", data = d_bin, seed = SEED)
